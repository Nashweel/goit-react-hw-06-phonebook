{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/contact-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contact-reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","deleteContact","filter","ContactForm","onAdd","useState","name","setName","phone","setPhone","contacts","useSelector","state","dispatch","useDispatch","handleChange","target","value","resetForm","onSubmit","evt","preventDefault","isExistContact","items","find","alert","actions","id","shortid","className","s","type","pattern","title","placeholder","onChange","FormInput","FormButton","ContactListItem","onClick","ContactsList","allContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","length","ContactList","map","Filter","e","currentTarget","App","itemReducer","createReducer","payload","filterReducer","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b530323e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__4TvGi\",\"ContactItem\":\"ContactList_ContactItem__2TMaP\"};","import { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"contact/ADD\");\n\nconst deleteContact = createAction(\"contact/Delete\");\n\nconst filter = createAction(\"contact/filter\");\n\nexport default { addContact, deleteContact, filter };\n","import React, { useState } from \"react\";\nimport shortid from \"shortid\";\nimport s from \"./ContactForm.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport actions from \"../../redux/contact-actions\";\n\nexport default function ContactForm({ onAdd }) {\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const contacts = useSelector((state) => state.contacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"phone\":\n        setPhone(value);\n        break;\n\n      default:\n    }\n  };\n\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n\n    const isExistContact = !!contacts.items.find(\n      (contacts) => contacts.name === name\n    );\n    isExistContact && alert(\"Контакт уже существует!\");\n\n    return (\n      !isExistContact &&\n      dispatch(actions.addContact({ id: shortid(), name, phone })) &&\n      resetForm()\n    );\n  };\n  const resetForm = () => {\n    setName(\"\");\n    setPhone(\"\");\n  };\n  return (\n    <form onSubmit={handleFormSubmit} className={s.ContactForm}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        placeholder=\"Введите имя\"\n        value={name}\n        onChange={handleChange}\n        className={s.FormInput}\n      />\n      <input\n        type=\"tel\"\n        name=\"phone\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        placeholder=\"Введите номер телефона\"\n        value={phone}\n        onChange={handleChange}\n        className={s.FormInput}\n      />\n      <button type=\"submit\" className={s.FormButton}>\n        Добавить контакт\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport actions from \"../../redux/contact-actions\";\nimport s from \"./ContactList.module.css\";\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter((items) =>\n    items.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst ContactsList = () => {\n  const contacts = useSelector((state) =>\n    getVisibleContacts(state.contacts.items, state.contacts.filter)\n  );\n  if (contacts.length === []) return null;\n  return (\n    <ul className={s.ContactList}>\n      {contacts.map(({ id, name, phone }) => (\n        <ContactListItem name={name} phone={phone} id={id} key={id} />\n      ))}\n    </ul>\n  );\n};\n\nconst ContactListItem = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      {name}:{phone}\n      <button onClick={() => dispatch(actions.deleteContact(id))}>\n        delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactsList;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport actions from \"../../redux/contact-actions\";\n\nconst Filter = () => {\n  const value = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={(e) => dispatch(actions.filter(e.currentTarget.value))}\n      placeholder=\"Введите имя для поиска\"\n    ></input>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactsList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nfunction App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactsList />\n    </>\n  );\n}\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./contact-actions\";\n\nconst itemReducer = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, { ...payload }],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [actions.filter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: itemReducer,\n  filter: filterReducer,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contact-reducers\";\n\nconst persistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: { contacts: persistReducer(persistConfig, contactsReducer) },\n  devTools: process.env.NODE_ENV === \"development\",\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__1zvAA\",\"FormInput\":\"ContactForm_FormInput__2aqf2\",\"FormButton\":\"ContactForm_FormButton__28giq\"};"],"sourceRoot":""}